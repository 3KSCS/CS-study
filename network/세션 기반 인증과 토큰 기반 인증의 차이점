💡 세션 기반 인증과 토큰 기반 인증의 차이에 대해 얘기해주세요.
- 세션 기반 인증
서버가 클라이언트에게 세션 ID를 부여하여 상태를 유지하는 방식.
세션 ID는 일반적으로 쿠키에 저장되며, 클라이언트는 이를 이용해 서버에 접속할 때마다 인증 상태를 확인함.
서버는 세션 상태를 메모리나 데이터베이스에 저장하여 관리함

- 토큰 기반 인증
클라이언트가 인증 후 서버로부터 발급받은 토큰을 사용하여 인증 상태를 유지하는 방식
토큰은 주로 JWT형식으로, 클라이언트가 저장하고 매 요청마다 헤더에 포함하여 전송함.
서버는 토큰의 서명을 통해 유효성을 검증하고, 상태를 저장할 필요가 없어짐.


💡 그렇다면 Stateful한 세션 기반의 인증 방식을 사용하게 된다면 어떠한 단점이 있을까요?
- 서버 리소스 사용 : 세션 상태를 저장하기 위해 서버 메모리나 데이터베이스 사용이 필요하므로, 확장성이 낮을 수 있음.
- 수평 확장 어려움 : 다수 서버 간에 세션 상태를 공유하기 위한 추가적인 설정과 동기화 필요.
- 상태 보존 문제 : 서버 재시작 시 세션 데이터 유실 가능성
- 보안 문제 : 해커가 훔친 쿠키를 이용해 요청을 보내면 서버는 올바른 사용자가 보낸 요청인지 알 수 없음. (세션 하이재킹)

+ 토큰 기반 방식의 단점
- 토큰 유효성 검증 : 토큰의 서명을 통해 유효성을 검증하기 때문에, 서버가 매 요청마다 복잡한 처리를 수행해야 함.
- 토큰 관리의 복잡성 : 토큰을 클라이언트에 저장하고 관리해야 하므로, 보안 취약점에 노출될 수 있음
- 세션 관리 어려움 : 토큰 기반 인증은 서버에 상태를 저장하지 않기 때문에, 로그아웃이나 세션 관리가 어려울 수 있음.
- 토큰의 크기 : JWT와 같은 토큰은 클레임(claim) 정보와 함께 기본적인 헤더와 서명을 포함하기 때문에 일정한 크기를 가지며, 매 요청마다 전송될 수 있음. 이는 트래픽 부담을 초래할 수 있음.



💡 그렇다면 세션 기반 인증과 토큰 기반 인증은 각각 어느 경우에 적합한가요?
- 세션 기반 인증 : 전통적인 웹 애플리케이션에서 사용자 세션을 직접 관리해야 할 경우 적합함. 
- 토큰 기반 인증 : 분산 환경에서 서비스 확장성을 유지하며 인증을 처리해야 할 경우, SPA나 모바일 앱에서 유용함.

